cmake_minimum_required( VERSION 2.8 )
project(FWTools)


set(PLATFOTM_NAME "__")
if(WIN32)
	if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
		set(PLATFOTM_NAME win32)
	endif()
	
	if("${CMAKE_SIZEOF_VOID_P}" STREQUAL "8")
		set(PLATFOTM_NAME x64)
	endif()
endif()

if(MSVC)
	option(STATIC_CRT "Use /MD (0) or /MT (1)" TRUE)
	if(STATIC_CRT)
		set(PLATFOTM_NAME ${PLATFOTM_NAME}_MT)
	else()
		set(PLATFOTM_NAME ${PLATFOTM_NAME}_MD)
	endif()
	
endif()
option(STATIC_LIB "STATIC LIBS" FALSE)
if(STATIC_LIB)
	set(PLATFOTM_NAME ${PLATFOTM_NAME}_LIB)
else()
	set(PLATFOTM_NAME ${PLATFOTM_NAME}_DLL)
endif()


macro(FixStaticLinking)
if(MSVC)
	foreach(flag
			CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
			CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
		if(STATIC_CRT)	
			if(${flag} MATCHES "/MD")
				string(REGEX REPLACE "/MD" "/MT" ${flag} "${${flag}}")
			endif()
		else()
			if(${flag} MATCHES "/MT")
				string(REGEX REPLACE "/MT" "/MD" ${flag} "${${flag}}")
			endif()
		endif()
	endforeach()
endif()
endmacro()

#set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}  -g -fno-omit-frame-pointer -fsanitize=address")
#set (CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} -g -fno-omit-frame-pointer -fsanitize=address")
#set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -g -fno-omit-frame-pointer -fsanitize=address")
#message("CMAKE_CXXs_FLAGS_DEBUG=${CMAKE_LINKER_FLAGS_DEBUG}")
#message("CMAKE_CXX_FLAGS=${CMAKE_MODULE_LINKER_FLAGS}")
if(CMAKE_CONFIGURATION_TYPES)
        message(ConfTypes="${CMAKE_CONFIGURATION_TYPES}")
	foreach(cfg ${CMAKE_CONFIGURATION_TYPES})
		string(TOUPPER ${cfg} cfgup)
		#message(Conf=${cfgup})
		set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/${cfg}/Lib)
		#set(CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/${cfg}/Pdb/Compile)
		set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/${cfg}/Lib)
		#set(CMAKE_PDB_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/${cfg}/Pdb)
		set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/${cfg}/Bin)
	endforeach()
else()
		set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/Lib)
		#set(CMAKE_COMPILE_PDB_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/Pdb/Compile)
		set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/Lib)
		#set(CMAKE_PDB_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/Pdb)
		set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/${PLATFOTM_NAME}/Bin)
endif()

add_subdirectory(HashLib)
add_subdirectory(SREUtils)
add_subdirectory(SRETools)

